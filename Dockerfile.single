# Single-server full-stack Dockerfile
FROM node:20-alpine AS builder

# Install SQLite and other dependencies
RUN apk add --no-cache sqlite bash curl wget

WORKDIR /app

# Copy package files for frontend
COPY package*.json ./
COPY *.config.* ./

# Install frontend dependencies
RUN npm ci

# Copy frontend source and build
COPY src ./src
COPY public ./public
COPY index.html ./
RUN npm run build

# Copy backend package files
COPY backend/package*.json ./backend/
WORKDIR /app/backend
RUN npm ci --only=production

# Copy backend source
COPY backend/ ./

# Go back to app root
WORKDIR /app

# Create the unified server file
RUN cat > server.js << 'EOF'
const express = require('express');
const path = require('path');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
require('dotenv').config({ path: './backend/.env' });

// Import backend routes
const authRoutes = require('./backend/routes/auth');
const requestRoutes = require('./backend/routes/requests');
const notificationRoutes = require('./backend/routes/notifications');
const userRoutes = require('./backend/routes/users');

const app = express();
const PORT = process.env.PORT || 3000;

// Security middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'"],
      imgSrc: ["'self'", "data:", "https:"],
      connectSrc: ["'self'"],
    },
  },
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100,
  message: 'Too many requests from this IP, please try again later.'
});
app.use('/api', limiter);

// CORS - allow all origins for single-server deployment
app.use(cors({
  origin: true,
  credentials: true,
  optionsSuccessStatus: 200
}));

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// API routes
app.use('/api/auth', authRoutes);
app.use('/api/requests', requestRoutes);
app.use('/api/notifications', notificationRoutes);
app.use('/api/users', userRoutes);

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// API status endpoint
app.get('/api/status', (req, res) => {
  res.json({
    api: 'TimeOff Manager API',
    version: '1.0.0',
    database: 'SQLite',
    timestamp: new Date().toISOString()
  });
});

// Serve static files (frontend)
app.use(express.static(path.join(__dirname, 'dist'), {
  maxAge: '1y',
  etag: true
}));

// SPA fallback - serve index.html for all non-API routes
app.get('*', (req, res) => {
  if (req.path.startsWith('/api/')) {
    return res.status(404).json({ message: 'API endpoint not found' });
  }
  res.sendFile(path.join(__dirname, 'dist', 'index.html'));
});

// Global error handler
app.use((error, req, res, next) => {
  console.error('Global error:', error);
  res.status(500).json({ 
    message: 'Internal server error',
    ...(process.env.NODE_ENV === 'development' && { error: error.message })
  });
});

// Start server
const startServer = async () => {
  try {
    // Test database connection
    const { testConnection } = require('./backend/config/database');
    const dbConnected = await testConnection();
    
    if (!dbConnected) {
      console.error('Failed to connect to database. Exiting...');
      process.exit(1);
    }

    app.listen(PORT, '0.0.0.0', () => {
      console.log(`🚀 TimeOff Manager running on port ${PORT}`);
      console.log(`🌐 Frontend: http://localhost:${PORT}`);
      console.log(`📡 API: http://localhost:${PORT}/api`);
      console.log(`📊 Health: http://localhost:${PORT}/health`);
      console.log(`🗄️ Database: SQLite (${process.env.DB_PATH || './backend/data/timeoff.db'})`);
      console.log(`🔧 Environment: ${process.env.NODE_ENV || 'development'}`);
    });
  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
};

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM received. Shutting down gracefully...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('SIGINT received. Shutting down gracefully...');
  process.exit(0);
});

startServer();
EOF

# Initialize database
WORKDIR /app/backend
RUN npm run init-db

WORKDIR /app

# Create startup script
RUN cat > start.sh << 'EOF'
#!/bin/sh
echo "🚀 Starting TimeOff Manager..."
echo "📊 Checking database..."
if [ ! -f "/app/backend/data/timeoff.db" ]; then
    echo "📊 Initializing database..."
    cd /app/backend && npm run init-db
fi
echo "▶️ Starting server..."
cd /app && node server.js
EOF

RUN chmod +x start.sh

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Change ownership of app directory
RUN chown -R nodejs:nodejs /app

USER nodejs

EXPOSE 3000

HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost:3000/health || exit 1

CMD ["./start.sh"]