# Multi-stage build for full-stack deployment
FROM node:20-alpine AS frontend-builder
WORKDIR /app/frontend

# Copy frontend dependencies
COPY package*.json ./
COPY *.config.* ./
RUN npm ci

# Copy frontend source and build
COPY src ./src
COPY public ./public
COPY index.html ./
RUN npm run build

FROM node:20-alpine AS backend-builder
WORKDIR /app/backend

# Copy backend dependencies
COPY backend/package*.json ./
RUN npm ci --only=production

# Copy backend source
COPY backend/ ./

FROM node:20-alpine AS production
WORKDIR /app

# Install SQLite3
RUN apk add --no-cache sqlite

# Copy backend
COPY --from=backend-builder /app/backend ./backend
WORKDIR /app/backend

# Initialize database
RUN npm run init-db

# Copy frontend build
COPY --from=frontend-builder /app/frontend/dist ./public

# Create a simple server that serves both API and static files
COPY <<EOF server.js
const express = require('express');
const path = require('path');
const cors = require('cors');

// Import your existing backend routes
const authRoutes = require('./routes/auth');
const requestRoutes = require('./routes/requests');
const notificationRoutes = require('./routes/notifications');
const userRoutes = require('./routes/users');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());

// API routes
app.use('/api/auth', authRoutes);
app.use('/api/requests', requestRoutes);
app.use('/api/notifications', notificationRoutes);
app.use('/api/users', userRoutes);

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Serve static files
app.use(express.static(path.join(__dirname, 'public')));

// SPA fallback
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(PORT, () => {
  console.log(\`ðŸš€ Full-stack server running on port \${PORT}\`);
});
EOF

EXPOSE 3000
CMD ["node", "server.js"]